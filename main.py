from aiogram import Bot, Dispatcher, types
from bs4 import BeautifulSoup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests
import re
import logging
import hashlib
import asyncio
import math

CHANNELS = '-1002303250066'
bot = Bot(token="7903408500:AAGu6fj6MjUSEY1ae4g8rl810cnj-ULZork")
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ö—ç—à–∞–º–∏ –∏ URL
manga_url_mapping = {}

# ________________________ Manga search —Ñ—É–Ω–∫—Ü–∏—è ________________________________ #
async def search_manga_by_title(title):
    search_url = f'https://manga-chan.me/?do=search&subaction=search&story={title}'
    response = requests.get(search_url)

    if response.status_code != 200:
        logging.error(f"Error: status {response.status_code}")
        return None

    soup = BeautifulSoup(response.content, 'html.parser')
    manga_items = soup.find_all('div', class_='content_row')
    manga_list = []
    for item in manga_items:
        raw_title = item.find('div', class_='manga_row1').text.strip()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
        manga_title_match = re.search(r'\((.*?)\)', raw_title)
        manga_title = manga_title_match.group(1) if manga_title_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        manga_url = item.find('h2').find('a')['href']

        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
        manga_hash = hashlib.md5(manga_url.encode()).hexdigest()
        manga_url_mapping[manga_hash] = manga_url

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –º–∞–Ω–≥—É –≤ —Å–ø–∏—Å–æ–∫
        manga_list.append({'manga_title': manga_title, 'manga_hash': manga_hash})

    return manga_list


# ________________________ Manga detail —Ñ—É–Ω–∫—Ü–∏—è ________________________________ #
def detail_manga(manga_url):
    response = requests.get(manga_url)
    if response.status_code != 200:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        return None

    soup = BeautifulSoup(response.content, 'html.parser')


    raw_title = soup.find('h1').text.strip()
    manga_title_match = re.search(r'\((.*?)\)', raw_title)
    manga_title = manga_title_match.group(1) if manga_title_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    description_tag = soup.find('div', id='description')
    description = description_tag.text.strip() if description_tag else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    status_tag = soup.find('td', class_='item', text="–°—Ç–∞—Ç—É—Å (–¢–æ–º–æ–≤)")
    volume_info = status_tag.find_next_sibling('td', class_='item2').text.strip() if status_tag else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∏ —Ç–æ–º–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    chapters_kol = soup.find('td', class_='item', text='–ó–∞–≥—Ä—É–∂–µ–Ω–æ')
    chapters_kol = chapters_kol.find_next_sibling('td', class_='item2').text.strip() if chapters_kol else "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    chapters = []
    for row in soup.find_all('tr'):
        chapter_info = row.find('div', class_='manga2')
        if chapter_info:
            link_tag = chapter_info.find('a')
            if link_tag:
                chapter_name = link_tag.text.strip()
                chapter_url = "https://manga-chan.me" + link_tag['href']
                chapters.append((chapter_name, chapter_url))


    cover_image_url = soup.find('img', id='cover')['src']

    manga_details = {
        "title": manga_title,
        "description": description,
        "volume_info": volume_info,
        "chapters_kol": chapters_kol,
        "chapters": chapters,
        'cover_image_url': cover_image_url,
    }
    return manga_details

# ________________________ Bot start —Ñ—É–Ω–∫—Ü–∏—è ________________________________ #
@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—å {message.from_user.full_name}! –û—Ç–ø—Ä–∞–≤ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–Ω–≥–∏ –∏ —è –Ω–∞–π–¥—É –º–∞–Ω–≥—É.')


@dp.message(Command('help'))
async def send_help(message: types.Message):
    help_text = (
        "üìñ –í–æ—Ç –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n\n"
        "1.–ú–∞–Ω–≥–∞ –±–µ—Ä—ë—Ç—Å—è —Å —Å–∞–π—Ç–∞ manga-chan.me\n\n"
        "–ï—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç –∫–∞–∫–æ–≥–æ-—Ç–æ –º–∞–Ω–≥–∏, —Ç–æ –∏ —Ç—É—Ç –≤ –±–æ—Ç–µ –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç!\n\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–Ω–≥–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è –≤–∞—Å.\n\n"
        "4. –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞–Ω–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≤—ã.\n\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\" –∏ \"‚û°Ô∏è –î–∞–ª–µ–µ\" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º, –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! üòä"
    )
    await message.reply(help_text)

# ________________________ Botda manga –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏—è ________________________________ #
@dp.message()
async def search_manga(message: types.Message):
    manga_title = message.text
    manga_search = await search_manga_by_title(manga_title)

    if manga_search is None or len(manga_search) == 0:
        await message.reply("–ú–∞–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    keyboard_builder = InlineKeyboardBuilder() 
    for manga in manga_search:
        keyboard_builder.button(text=manga['manga_title'], callback_data=manga['manga_hash'])
    keyboard_builder.adjust(1)


    await message.reply("–í–æ—Ç —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏: \n", reply_markup=keyboard_builder.as_markup(resize_keyboard=True))

# ________________________ Botda manga detail —Ñ—É–Ω–∫—Ü–∏—è ________________________________ #
# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–∞–Ω–≥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@dp.callback_query()
async def show_manga_details(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ callback_data —Å–∏–º–≤–æ–ª ":"
    if ':' in callback_query.data:
        manga_hash, page = callback_query.data.split(':')
        page = int(page)
    else:
        manga_hash = callback_query.data
        page = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    manga_url = manga_url_mapping.get(manga_hash)

    if not manga_url:
        await callback_query.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–∞–Ω–≥–µ.")
        return

    manga_details = detail_manga(manga_url)
    if manga_details is None:
        await callback_query.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–Ω–≥–µ.")
        return

    max_chapters = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start = page * max_chapters
    end = start + max_chapters
    chapters_to_display = manga_details['chapters'][start:end]

    details_text = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ:  {manga_details['title']}\n\n"
        f"üìö–û–ø–∏—Å–∞–Ω–∏–µüìö:\n {manga_details['description']}\n\n"
        f"‚≠ï–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–º–æ–≤‚≠ï:\n {manga_details['volume_info']}\n\n"
        f"üíæ–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≥–ª–∞–≤—ãüíæ:\n {manga_details['chapters_kol']}\n\n"
        "–ì–ª–∞–≤—ã:\n"
    )

    keyboard = InlineKeyboardBuilder()
    for chapter_name, chapter_url in chapters_to_display:
        keyboard.button(text=chapter_name, url=chapter_url)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–î–∞–ª–µ–µ" –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if page > 0:
        keyboard.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"{manga_hash}:{page - 1}"
        )
    if end < len(manga_details['chapters']):
        keyboard.button(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"{manga_hash}:{page + 1}"
        )

    keyboard.adjust(1)

    await callback_query.message.edit_media(
        media=types.InputMediaPhoto(
            media=manga_details['cover_image_url'],
            caption=details_text
        ),
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )



async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
